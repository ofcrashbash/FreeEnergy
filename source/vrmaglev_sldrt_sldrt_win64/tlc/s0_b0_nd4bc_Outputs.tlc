%implements s0_b0_nd4bc_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

real_T tmp;
real_T u1;
real_T u2;
%closefile localVarDecl
%assign tlcOutputsFcnOfS0B1 = OpaqueTLCBlockFcn("Outputs", 0, 1, 0, 3, 0)
%assign tlcOutputsFcnOfS0B4 = OpaqueTLCBlockFcn("Outputs", 0, 4, 0, 3, 1)
%<SLibGenerateExtModeOutput(system)>
/* {S!d446}SignalGenerator: '<Root>/Signal Generator' */
tmp = vrmaglev_sldrt_P.SignalGenerator_Frequency * %<(SLibCG_SE(LibGetT()))>;
if (tmp - floor(tmp) >= 0.5) {
    /* {S!d442}SignalGenerator: '<Root>/Signal Generator' */
    vrmaglev_sldrt_B.SignalGenerator = vrmaglev_sldrt_P.SignalGenerator_Amplitude;
} else {
    /* {S!d444}SignalGenerator: '<Root>/Signal Generator' */
    vrmaglev_sldrt_B.SignalGenerator = -vrmaglev_sldrt_P.SignalGenerator_Amplitude;
}
/* {E!d446}End of SignalGenerator: '<Root>/Signal Generator' */

/* {S!d448}Sum: '<Root>/Sum2' incorporates:
 *  Constant: '<Root>/Setpoint Offset'
 */
vrmaglev_sldrt_B.Sum2 = vrmaglev_sldrt_P.SetpointOffset_Value + vrmaglev_sldrt_B.SignalGenerator;
/* {S!d450}StateSpace: '<Root>/Analog Filter Design' */
vrmaglev_sldrt_B.AnalogFilterDesign = 0.0;
vrmaglev_sldrt_B.AnalogFilterDesign += vrmaglev_sldrt_P.AnalogFilterDesign_C * vrmaglev_sldrt_X.AnalogFilterDesign_CSTATE[1];
/* {S!d452}Integrator: '<S3>/position' */
/* Limited  Integrator  */
if (vrmaglev_sldrt_X.position_CSTATE >= vrmaglev_sldrt_P.position_UpperSat) {
    vrmaglev_sldrt_X.position_CSTATE = vrmaglev_sldrt_P.position_UpperSat;
} else {
    if (vrmaglev_sldrt_X.position_CSTATE <= vrmaglev_sldrt_P.position_LowerSat) {
        vrmaglev_sldrt_X.position_CSTATE = vrmaglev_sldrt_P.position_LowerSat;
    }
}
/* {S!d454}Integrator: '<S3>/position' */
vrmaglev_sldrt_B.position = vrmaglev_sldrt_X.position_CSTATE;
/* {S!d456}Fcn: '<S7>/Position sensor gain and offset' */
vrmaglev_sldrt_B.Positionsensorgainandoffset = 1000.0 * vrmaglev_sldrt_B.position;
/* {S!d458}Gain: '<S7>/A//D converter gain' */
vrmaglev_sldrt_B.ADconvertergain = vrmaglev_sldrt_P.ADconvertergain_Gain * vrmaglev_sldrt_B.Positionsensorgainandoffset;
/* {S!d466}Saturate: '<S3>/Position limits' */
tmp = vrmaglev_sldrt_B.ADconvertergain;
u1 = vrmaglev_sldrt_P.Positionlimits_LowerSat;
u2 = vrmaglev_sldrt_P.Positionlimits_UpperSat;
if (tmp > u2) {
    /* {S!d460}Saturate: '<S3>/Position limits' */
    vrmaglev_sldrt_B.Positionlimits = u2;
} else if (tmp < u1) {
    /* {S!d462}Saturate: '<S3>/Position limits' */
    vrmaglev_sldrt_B.Positionlimits = u1;
} else {
    /* {S!d464}Saturate: '<S3>/Position limits' */
    vrmaglev_sldrt_B.Positionlimits = tmp;
}
/* {E!d466}End of Saturate: '<S3>/Position limits' */
if (%<(SLibCGIRIsSampleHit(1, 0))>) {
    /* {S!d468}ZeroOrderHold: '<Root>/Zero-Order Hold' */
    vrmaglev_sldrt_B.ZeroOrderHold = vrmaglev_sldrt_B.Positionlimits;
}
/* {S!d474}ManualSwitch: '<Root>/Bypass Filter' */
if (vrmaglev_sldrt_P.BypassFilter_CurrentSetting == 1) {
    /* {S!d470}ManualSwitch: '<Root>/Bypass Filter' */
    vrmaglev_sldrt_B.BypassFilter = vrmaglev_sldrt_B.AnalogFilterDesign;
} else {
    /* {S!d472}ManualSwitch: '<Root>/Bypass Filter' */
    vrmaglev_sldrt_B.BypassFilter = vrmaglev_sldrt_B.ZeroOrderHold;
}
/* {E!d474}End of ManualSwitch: '<Root>/Bypass Filter' */
if (%<(SLibCGIRIsSampleHit(2, 0))>) {
%if !WHITE_SPACE(tlcOutputsFcnOfS0B1)
    /* {S!d476}Scope: '<Root>/Scope' */
%<tlcOutputsFcnOfS0B1>\
%endif
}
/* {S!d482}Switch: '<S1>/Ball Presence Detection Value > Threshold = Ball Not Present' */
if (vrmaglev_sldrt_B.BypassFilter >= vrmaglev_sldrt_P.BallPresenceDetectionValueThresholdBallNotPresent_Threshold) {
    /* {S!d478}Switch: '<S1>/Ball Presence Detection Value > Threshold = Ball Not Present' incorporates:
 *  Constant: '<S1>/Position of  Hidden Ball'
 */
    vrmaglev_sldrt_B.BallPresenceDetectionValueThresholdBallNotPresent = vrmaglev_sldrt_P.PositionofHiddenBall_Value;
} else {
    /* {S!d480}Switch: '<S1>/Ball Presence Detection Value > Threshold = Ball Not Present' */
    vrmaglev_sldrt_B.BallPresenceDetectionValueThresholdBallNotPresent = vrmaglev_sldrt_B.BypassFilter;
}
/* {E!d482}End of Switch: '<S1>/Ball Presence Detection Value > Threshold = Ball Not Present' */

/* {S!d484}Assignment: '<S4>/Assignment' incorporates:
 *  Constant: '<S5>/Constant'
 */
vrmaglev_sldrt_B.Assignment[0] = vrmaglev_sldrt_P.Constant_Value[0];
vrmaglev_sldrt_B.Assignment[1] = vrmaglev_sldrt_P.Constant_Value[1];
vrmaglev_sldrt_B.Assignment[2] = vrmaglev_sldrt_P.Constant_Value[2];
/* {S!d486}Assignment: '<S4>/Assignment' */
vrmaglev_sldrt_B.Assignment[1] = vrmaglev_sldrt_B.BallPresenceDetectionValueThresholdBallNotPresent;
if (%<(SLibCGIRIsSampleHit(3, 0))>) {
%if !WHITE_SPACE(tlcOutputsFcnOfS0B4)
    /* {S!d488}S-Function (vrsfunc): '<Root>/VR Sink' */
%<tlcOutputsFcnOfS0B4>\
%endif
}
/* {S!d490}Sum: '<Root>/Sum' */
vrmaglev_sldrt_B.Sum = vrmaglev_sldrt_B.Sum2 - vrmaglev_sldrt_B.BypassFilter;
/* {S!d492}Gain: '<S2>/Ki' */
vrmaglev_sldrt_B.Ki = vrmaglev_sldrt_P.DiscreteTimePID_Ki * vrmaglev_sldrt_B.Sum;
/* {S!d494}Gain: '<S6>/Gain' */
vrmaglev_sldrt_B.Gain = vrmaglev_sldrt_P.Ts * vrmaglev_sldrt_B.Ki;
if (%<(SLibCGIRIsSampleHit(1, 0))>) {
    /* {S!d496}UnitDelay: '<S6>/Unit Delay' */
    vrmaglev_sldrt_B.UnitDelay = vrmaglev_sldrt_DW.UnitDelay_DSTATE;
}
/* {S!d498}Sum: '<S6>/Sum' */
vrmaglev_sldrt_B.Sum_k = vrmaglev_sldrt_B.UnitDelay + vrmaglev_sldrt_B.Gain;
/* {S!d500}RelationalOperator: '<S6>/Relational operator' incorporates:
 *  Constant: '<S6>/Constant'
 */
vrmaglev_sldrt_B.Relationaloperator = (vrmaglev_sldrt_B.Sum_k < vrmaglev_sldrt_P.DiscreteTimeLimitedIntegrator_upper_limit);
/* {S!d506}Switch: '<S6>/Switch' */
if (vrmaglev_sldrt_B.Relationaloperator >= vrmaglev_sldrt_P.Switch_Threshold) {
    /* {S!d502}Switch: '<S6>/Switch' */
    vrmaglev_sldrt_B.Switch = vrmaglev_sldrt_B.Sum_k;
} else {
    /* {S!d504}Switch: '<S6>/Switch' incorporates:
 *  Constant: '<S6>/Constant'
 */
    vrmaglev_sldrt_B.Switch = vrmaglev_sldrt_P.DiscreteTimeLimitedIntegrator_upper_limit;
}
/* {E!d506}End of Switch: '<S6>/Switch' */

/* {S!d508}RelationalOperator: '<S6>/Relational operator1' incorporates:
 *  Constant: '<S6>/Constant1'
 */
vrmaglev_sldrt_B.Relationaloperator1 = (vrmaglev_sldrt_B.Switch > vrmaglev_sldrt_P.DiscreteTimeLimitedIntegrator_lower_limit);
/* {S!d514}Switch: '<S6>/Switch1' */
if (vrmaglev_sldrt_B.Relationaloperator1 >= vrmaglev_sldrt_P.Switch1_Threshold) {
    /* {S!d510}Switch: '<S6>/Switch1' */
    vrmaglev_sldrt_B.Switch1 = vrmaglev_sldrt_B.Switch;
} else {
    /* {S!d512}Switch: '<S6>/Switch1' incorporates:
 *  Constant: '<S6>/Constant1'
 */
    vrmaglev_sldrt_B.Switch1 = vrmaglev_sldrt_P.DiscreteTimeLimitedIntegrator_lower_limit;
}
/* {E!d514}End of Switch: '<S6>/Switch1' */
if (%<(SLibCGIRIsSampleHit(1, 0))>) {
    /* {S!d516}UnitDelay: '<S2>/Unit Delay' */
    vrmaglev_sldrt_B.UnitDelay_b = vrmaglev_sldrt_DW.UnitDelay_DSTATE_a;
}
/* {S!d518}Sum: '<S2>/Sum3' */
vrmaglev_sldrt_B.Sum3 = vrmaglev_sldrt_B.Sum - vrmaglev_sldrt_B.UnitDelay_b;
/* {S!d520}Gain: '<S2>/Gain1' */
tmp = 1.0 / vrmaglev_sldrt_P.Ts;
/* {S!d522}Gain: '<S2>/Gain1' */
vrmaglev_sldrt_B.Gain1 = tmp * vrmaglev_sldrt_B.Sum3;
/* {S!d524}Gain: '<S2>/Kd' */
vrmaglev_sldrt_B.Kd = vrmaglev_sldrt_P.DiscreteTimePID_Kd * vrmaglev_sldrt_B.Gain1;
/* {S!d526}Gain: '<S2>/Kp' */
vrmaglev_sldrt_B.Kp = vrmaglev_sldrt_P.DiscreteTimePID_Kp * vrmaglev_sldrt_B.Sum;
/* {S!d528}Sum: '<S2>/Sum2' */
vrmaglev_sldrt_B.Sum2_f = (vrmaglev_sldrt_B.Kd + vrmaglev_sldrt_B.Kp) + vrmaglev_sldrt_B.UnitDelay;
/* {S!d530}Gain: '<Root>/FeedForward' */
vrmaglev_sldrt_B.FeedForward = vrmaglev_sldrt_P.FeedForward_Gain * vrmaglev_sldrt_B.BypassFilter;
/* {S!d532}Fcn: '<S3>/variable gap' */
tmp = 0.006 - vrmaglev_sldrt_B.position;
tmp = %<(SLibCGCallSubFcn("rt_powd_snf", ["tmp", "2.0"], 0, 3, 0))>;
/* {S!d534}Fcn: '<S3>/variable gap' */
vrmaglev_sldrt_B.variablegap = 2.16e-6 / tmp;
/* {S!d536}TransferFcn: '<S3>/Power amplifier and coil' */
vrmaglev_sldrt_B.Poweramplifierandcoil = 0.0;
vrmaglev_sldrt_B.Poweramplifierandcoil += vrmaglev_sldrt_P.Poweramplifierandcoil_C * vrmaglev_sldrt_X.Poweramplifierandcoil_CSTATE;
/* {S!d538}Product: '<S3>/Motion force' */
vrmaglev_sldrt_B.Motionforce = vrmaglev_sldrt_B.variablegap * vrmaglev_sldrt_B.Poweramplifierandcoil * vrmaglev_sldrt_B.Poweramplifierandcoil;
/* {S!d540}Integrator: '<S3>/velocity' */
vrmaglev_sldrt_B.velocity = vrmaglev_sldrt_X.velocity_CSTATE;
/* {S!d548}DeadZone: '<S9>/Distance out of limits' */
if (vrmaglev_sldrt_B.position > vrmaglev_sldrt_P.Distanceoutoflimits_End) {
    /* {S!d542}DeadZone: '<S9>/Distance out of limits' */
    vrmaglev_sldrt_B.Distanceoutoflimits = vrmaglev_sldrt_B.position - vrmaglev_sldrt_P.Distanceoutoflimits_End;
} else if (vrmaglev_sldrt_B.position >= vrmaglev_sldrt_P.Distanceoutoflimits_Start) {
    /* {S!d544}DeadZone: '<S9>/Distance out of limits' */
    vrmaglev_sldrt_B.Distanceoutoflimits = 0.0;
} else {
    /* {S!d546}DeadZone: '<S9>/Distance out of limits' */
    vrmaglev_sldrt_B.Distanceoutoflimits = vrmaglev_sldrt_B.position - vrmaglev_sldrt_P.Distanceoutoflimits_Start;
}
/* {E!d548}End of DeadZone: '<S9>/Distance out of limits' */

/* {S!d550}RelationalOperator: '<S9>/Outside Limits?' incorporates:
 *  Constant: '<S9>/0'
 */
vrmaglev_sldrt_B.OutsideLimits = (vrmaglev_sldrt_P.u_Value != vrmaglev_sldrt_B.Distanceoutoflimits);
/* {S!d552}Product: '<S9>/Just on//off  switch ' */
vrmaglev_sldrt_B.Justonoffswitch = vrmaglev_sldrt_B.velocity * vrmaglev_sldrt_B.OutsideLimits;
/* {S!d554}Gain: '<S9>/limit damping' */
vrmaglev_sldrt_B.limitdamping = vrmaglev_sldrt_P.limitdamping_Gain * vrmaglev_sldrt_B.Justonoffswitch;
/* {S!d556}Gain: '<S9>/limit elesticity' */
vrmaglev_sldrt_B.limitelesticity = vrmaglev_sldrt_P.limitelesticity_Gain * vrmaglev_sldrt_B.Distanceoutoflimits;
/* {S!d558}Sum: '<S9>/Fc1' */
vrmaglev_sldrt_B.Fc1 = vrmaglev_sldrt_B.limitdamping + vrmaglev_sldrt_B.limitelesticity;
/* {S!d560}Gain: '<S3>/Ball damping' */
vrmaglev_sldrt_B.Balldamping = vrmaglev_sldrt_P.Balldamping_Gain * vrmaglev_sldrt_B.velocity;
/* {S!d562}Sum: '<S3>/Fc' incorporates:
 *  Constant: '<S3>/Gravity force'
 */
vrmaglev_sldrt_B.Fc = ((vrmaglev_sldrt_B.Motionforce + vrmaglev_sldrt_P.Gravityforce_Value) + vrmaglev_sldrt_B.Fc1) - vrmaglev_sldrt_B.Balldamping;
/* {S!d564}Gain: '<S3>/1//m' */
vrmaglev_sldrt_B.um = vrmaglev_sldrt_P.um_Gain * vrmaglev_sldrt_B.Fc;
/* {S!d566}Sum: '<Root>/Sum1' incorporates:
 *  Constant: '<Root>/Constant'
 */
vrmaglev_sldrt_B.Sum1 = vrmaglev_sldrt_P.Constant_Value_f - vrmaglev_sldrt_B.FeedForward;
/* {S!d568}Product: '<Root>/Product' */
vrmaglev_sldrt_B.Product = vrmaglev_sldrt_B.Sum2_f * vrmaglev_sldrt_B.Sum1;
/* {S!d576}Saturate: '<Root>/Saturation' */
tmp = vrmaglev_sldrt_B.Product;
u1 = vrmaglev_sldrt_P.Saturation_LowerSat;
u2 = vrmaglev_sldrt_P.Saturation_UpperSat;
if (tmp > u2) {
    /* {S!d570}Saturate: '<Root>/Saturation' */
    vrmaglev_sldrt_B.Saturation = u2;
} else if (tmp < u1) {
    /* {S!d572}Saturate: '<Root>/Saturation' */
    vrmaglev_sldrt_B.Saturation = u1;
} else {
    /* {S!d574}Saturate: '<Root>/Saturation' */
    vrmaglev_sldrt_B.Saturation = tmp;
}
/* {E!d576}End of Saturate: '<Root>/Saturation' */

/* {S!d578}Gain: '<S8>/D//A converter gain' */
vrmaglev_sldrt_B.DAconvertergain = vrmaglev_sldrt_P.DAconvertergain_Gain * vrmaglev_sldrt_B.Saturation;
/* {S!d586}Saturate: '<S8>/DA converter  saturation' */
tmp = vrmaglev_sldrt_B.DAconvertergain;
u1 = vrmaglev_sldrt_P.DAconvertersaturation_LowerSat;
u2 = vrmaglev_sldrt_P.DAconvertersaturation_UpperSat;
if (tmp > u2) {
    /* {S!d580}Saturate: '<S8>/DA converter  saturation' */
    vrmaglev_sldrt_B.DAconvertersaturation = u2;
} else if (tmp < u1) {
    /* {S!d582}Saturate: '<S8>/DA converter  saturation' */
    vrmaglev_sldrt_B.DAconvertersaturation = u1;
} else {
    /* {S!d584}Saturate: '<S8>/DA converter  saturation' */
    vrmaglev_sldrt_B.DAconvertersaturation = tmp;
}
/* {E!d586}End of Saturate: '<S8>/DA converter  saturation' */
%<SLibInsertSolverResetCode()>\
%closefile cfgTxt
%<cfgTxt>
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Outputs(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 3, fcnProtoType)>
%endfunction
